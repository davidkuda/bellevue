BEGIN;

SET ROLE dev;


create schema if not exists bellevue;

SET ROLE dev;

----------------------------------------------------------------------------------
-- create a generic model for products and prices --------------------------------
----------------------------------------------------------------------------------
-- NOTE: -------------------------------------------------------------------------
-- ANSISQL is current_timestamp, PostgreSQL is now() (but you can use both in PG).
-- It refers to the start of the transaction, not point of execution. ------------
----------------------------------------------------------------------------------
-- NOTE: -------------------------------------------------------------------------
-- use `id INT generated by default as identity primary key,` insetad ------------
-- of `id serial`, see https://stackoverflow.com/a/55300741/14501123 -------------

BEGIN TRANSACTION;

create table bellevue.price_category (
	id INT generated by default as identity primary key,
	name TEXT unique not null, -- reduced, regular, surplus
	description TEXT,

	created_at TIMESTAMPTZ default now() not null,
	updated_at TIMESTAMPTZ default now() not null,
	deleted_at TIMESTAMPTZ
);

-- MWST / VAT
create table bellevue.taxes (
	id INT generated by default as identity primary key,
	mwst_satz SMALLINT not null
	    CHECK (mwst_satz between 0 and 10000), -- 8.1% => 810
	code TEXT unique, -- z.B. B81
	name TEXT,
	description TEXT,

	created_at TIMESTAMPTZ default now() not null,
	updated_at TIMESTAMPTZ default now() not null,
	deleted_at TIMESTAMPTZ
);


create table bellevue.financial_accounts (
	id INT generated by default as identity primary key,
	code INT unique, -- 3000, 3xxx
	name TEXT not null, -- Verpflegung, Kiosk
	description TEXT,
	tax_id INT not null references bellevue.taxes(id) on delete restrict,

	created_at TIMESTAMPTZ default now() not null,
	updated_at TIMESTAMPTZ default now() not null,
	deleted_at TIMESTAMPTZ
);

create table bellevue.products (
	id INT generated by default as identity primary key,
	name TEXT not null,
	description TEXT,
	financial_account_id INT not null references bellevue.financial_accounts(id) on delete restrict,

	created_at TIMESTAMPTZ default now() not null,
	updated_at TIMESTAMPTZ default now() not null,
	deleted_at TIMESTAMPTZ
);

create table bellevue.prices (
	id INT generated by default as identity primary key,
	price INT not null, -- 11.00 CHF => 1100
	product_id INT
		not null
		references bellevue.products(id)
		on delete restrict,
	price_category_id INT -- reduced, regular, surplus
		not null
		references bellevue.price_category(id)
		on delete restrict,

	valid_from DATE not null default current_date,
	valid_to   DATE,

	created_at TIMESTAMPTZ default now() not null,
	updated_at TIMESTAMPTZ default now() not null,
	deleted_at TIMESTAMPTZ
);

-- one active row per product+category
create unique index prices_active_unique
on bellevue.prices (product_id, price_category_id)
where valid_to is null;


create table bellevue.consumptions (
	id BIGINT generated by default as identity primary key,
	product_id INT
		not null
		references bellevue.products(id)
		on delete restrict,
	price INT, -- 11.00 CHF => 1100, this is a nonmutable fact, therefore, no ID ref is necessary
	price_id INT -- for analytics
		not null
		references bellevue.prices(id)
		on delete restrict,
	mwst_id INT
		not null
		references bellevue.taxes(id)
		on delete restrict,
	mwst_price INT,
	date DATE,

	created_at TIMESTAMPTZ default now() not null,
	updated_at TIMESTAMPTZ default now() not null,
	deleted_at TIMESTAMPTZ
);

COMMIT;


----------------------------------------------------------------------------------
-- Update Permissions: -----------------------------------------------------------

GRANT USAGE ON SCHEMA bellevue TO kuda_ai;

GRANT SELECT, INSERT, UPDATE, DELETE
ON ALL TABLES IN SCHEMA bellevue
TO app;

GRANT USAGE, SELECT, UPDATE
ON ALL SEQUENCES IN SCHEMA bellevue
TO app;

ALTER TABLE bellevue.bellevue_origins OWNER TO dev;
ALTER TABLE bellevue.invoices OWNER TO dev;

COMMIT;
